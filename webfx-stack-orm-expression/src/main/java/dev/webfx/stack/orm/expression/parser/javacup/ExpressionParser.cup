package dev.webfx.stack.orm.expression.parser.javacup;

import java_cup.runtime.lr_parser;
import dev.webfx.stack.orm.expression.builder.terms.*;
import dev.webfx.platform.util.Numbers;

/* ----------------------Preliminary Declarations Section--------------------*/
   
/* Parser code to change the way the parser reports errors (include
   line and column number of the error). */
parser code {:

    /* Change the method report_error so it will display the line and
       column of where the error occurred in the input as well as the
       reason for the error which is passed into the method in the
       String 'message'. */
    public void report_error(String message, Object info) {
        System.err.println(generateErrorMessage(message, info));
    }

    /* Change the method report_fatal_error so when it reports a fatal
       error it will display the line and column number of where the
       fatal error occurred in the input as well as the reason for the
       fatal error which is passed into the method in the object
       'message' and then exit.*/
    public void report_fatal_error(String message, Object info) {
        throw new IllegalArgumentException(generateErrorMessage(message, info));
    }

    private String generateErrorMessage(String message, Object info) {

        /* Create a StringBuilder called 'm' with the string 'Error' in it. */
        StringBuilder m = new StringBuilder("Error");

        /* Check if the information passed to the method is the same
           type as the type java_cup.runtime.Symbol. */
        if (info instanceof java_cup.runtime.Symbol) {
            /* Declare a java_cup.runtime.Symbol object 's' with the
               information in the object info that is being typecasted
               as a java_cup.runtime.Symbol object. */
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

            /* Check if the line number in the input is greater or
               equal to zero. */
            if (s.left >= 0) {
                /* Add to the end of the StringBuilder error message
                   the line number of the error in the input. */
                m.append(" in line "+(s.left+1));
                /* Check if the column number in the input is greater
                   or equal to zero. */
                if (s.right >= 0)
                    /* Add to the end of the StringBuilder error message
                       the column number of the error in the input. */
                    m.append(", column "+(s.right+1));
            }
        }

        /* Add to the end of the StringBuilder error message created in
           this method the message that was passed into this method. */
        m.append(" : "+message);

        return m.toString();
    }
:};
   

   
/* ------------Declaration of Terminals and Non Terminals Section----------- */
   
/* Terminals (tokens returned by the scanner).*/
terminal          EXPR_START;
terminal          SELECT, DISTINCT, FROM, WHERE, GROUP_BY, HAVING, ORDER_BY, DESC, ASC, NULLS, FIRST, LAST, LIMIT, INSERT, UPDATE, DELETE, SET, EXISTS, IS, LIKE, IN, AS, ANY, ALL, THIS;
terminal          OBJ_STATE, IMAGE;
terminal          LPAREN, RPAREN, LBRACK, RBRACK, COLON, COMMA, DOT, LCURLY, RCURLY;
terminal          PLUS, MINUS, MULT, DIV, EQ, GT, LT, NOT, QUESTION, EQEQ, LTEQ, GTEQ, NOTEQ, AND, OR;
terminal          DOLLAR;
terminal          NULL;
terminal Object   NUMBER;
terminal Boolean  BOOLEAN;
terminal String   STRING, IDENTIFIER;

/* Non terminals used in the grammar section.*/
non terminal Object                       parser_start;
non terminal SelectBuilder                select_query, select_start, select_distinct, select_class, select_where, select_group, select_order, select_limit;
non terminal InsertBuilder                insert_statement, insert_start, insert_class, insert_set;
non terminal UpdateBuilder                update_statement, update_start, update_class, update_set, update_where;
non terminal DeleteBuilder                delete_statement, delete_start, delete_class, delete_where;
non terminal ExpressionBuilder            expr, expr_list_token, expr_or_list, left_dot, list_dot, list_dot_right, field_dot, field_dot_right, expr_dot, expr_dot_right, field, fields_group, val, constant, parameter, ordered, ordered_nulls;
non terminal ExpressionArrayBuilder       expr_list, expr2_list, val_list, order_list;
non terminal JsonObjectExpressionBuilder  json_token_list;
non terminal Boolean                      dot_op;

/* -------------Precedence and Associatively of Terminals Section----------- */
   
// precedence nonassoc QUESTION;
precedence nonassoc SELECT, DISTINCT, FROM, WHERE, GROUP_BY, HAVING, ORDER_BY, DESC, ASC, LIMIT, INSERT, UPDATE; //0
precedence right QUESTION, COLON;                                                        //1
precedence right OR;                                                                     //2
precedence right AND;                                                                    //3
precedence right NOT;                                                                    //4
precedence left EQ, EQEQ, NOTEQ, LT, LTEQ, GT, GTEQ, IS, LIKE, IN;                       //5
precedence left PLUS; // right would be ok except for left casting, ex: '#' + ref + name //6
precedence left MINUS;                                                                   //6
precedence right MULT;                                                                   //7
precedence left DIV;                                                                     //7
precedence right DOT;                                                                    //8

start with parser_start;

/* ----------------------------Grammar Section-------------------- */

parser_start ::= select_query:select
              {: RESULT = select; :}
            | insert_statement:insert
              {: RESULT = insert; :}
            | update_statement:update
              {: RESULT = update; :}
            | delete_statement:delete
              {: RESULT = delete; :}
            | EXPR_START expr_list:e
              {: RESULT = e; :}
            | ORDER_BY order_list:o
              {: RESULT = o; :}
            ;

expr_list ::= expr_list:list COMMA expr_list_token:t
              {: RESULT = list; RESULT.expressions.add(t); :}
            | expr_list_token:t
              {: RESULT = new ExpressionArrayBuilder(t); :}
            ;

expr2_list ::= expr2_list:list COMMA expr_list_token:t
              {: RESULT = list; RESULT.expressions.add(t); :}
            | expr_list_token:t1 COMMA expr_list_token:t2
              {: RESULT = new ExpressionArrayBuilder(t1); RESULT.expressions.add(t2); :}
            ;

expr_or_list ::= expr_or_list:list COMMA expr:e
              {: RESULT = ExpressionArrayBuilder.add(list, e); :}
            | expr_list_token:t
              {: RESULT = t; :}
            ;

expr_list_token ::= expr:e
              {: RESULT = e; :}
            | fields_group:fg
              {: RESULT = fg; :}
            | list_dot:lf
              {: RESULT = lf; :}
            ;

fields_group ::= LT IDENTIFIER:id GT
               {: RESULT = new FieldsGroupBuilder(id); :}
               | MULT
               {: RESULT = new FieldsGroupBuilder("*"); :}
             ;

dot_op    ::= DOT
              {: RESULT = false; :}
            | DOT DOT
              {: RESULT = true; :}
            ;

left_dot    ::= field:f
              {: RESULT = f; :}
            ;              

list_dot  ::= left_dot:left dot_op:dot list_dot_right:right
               {: RESULT = new DotBuilder(left, right, dot); :}
            ;

list_dot_right ::= fields_group:fg
               {: RESULT = fg; :}
            | list_dot:ld
              {: RESULT = ld; :}
            | LPAREN expr2_list:el RPAREN
              {: RESULT = el; :}
            | LBRACK left_dot:left AS IDENTIFIER:alias RBRACK dot_op:dot list_dot_right:right
               {: RESULT = new DotBuilder(new AsBuilder(left, alias), right, dot); :}
            ;

field_dot ::= left_dot:left dot_op:dot field_dot_right:right
			  {: RESULT = new DotBuilder(left, right, dot); :}
            ;

field_dot_right ::= field:f
               {: RESULT = f; :}
            | field_dot:fd
              {: RESULT = fd; :}
            | LBRACK left_dot:left AS IDENTIFIER:alias RBRACK dot_op:dot field_dot_right:right
               {: RESULT = new DotBuilder(new AsBuilder(left, alias), right, dot); :}
            ;

expr_dot ::= left_dot:left dot_op:dot expr_dot_right:right
			  {: RESULT = new DotBuilder(left, right, dot); :}
			;

expr_dot_right ::= expr_dot:ed
               {: RESULT = ed; :}
            | LPAREN expr:e RPAREN
               {: RESULT = e; :}
            | LBRACK left_dot:left AS IDENTIFIER:alias RBRACK dot_op:dot expr_dot_right:right
               {: RESULT = new DotBuilder(new AsBuilder(left, alias), right, dot); :}
            ;


expr      ::= expr:left OR expr:right
			  {: RESULT = new OrBuilder(left, right); :}
			| expr:left AND expr:right
			  {: RESULT = new AndBuilder(left, right); :}
            | expr:e AS IDENTIFIER:alias
              {: RESULT = new AsBuilder(e, alias); :}
			| NOT expr:e
			  {: RESULT = new NotBuilder(e); :}
			| EXISTS LPAREN select_query:select RPAREN
			  {: RESULT = new ExistsBuilder(select); :}
			| LPAREN expr:e RPAREN
			  {: RESULT = e; :}
			| LBRACK expr_or_list:e RBRACK
			  {: RESULT = new ArrayBuilder(e); :}
			| expr:left EQ expr:right
			  {: RESULT = new EqualsBuilder(left, right); :}
			| expr:left EQEQ expr:right
			  {: RESULT = new EqualsBuilder(left, right); :}
			| expr:left NOTEQ expr:right
			  {: RESULT = new NotEqualsBuilder(left, right); :}
			| expr:left LT expr:right
			  {: RESULT = new LessThanBuilder(left, right); :}
			| expr:left LTEQ expr:right
			  {: RESULT = new LessThanOrEqualsBuilder(left, right); :}
			| expr:left GT expr:right
			  {: RESULT = new GreaterThanBuilder(left, right); :}
			| expr:left GTEQ expr:right
			  {: RESULT = new GreaterThanOrEqualsBuilder(left, right); :}
			| expr:left IS NULL
			  {: RESULT = new EqualsBuilder(left, new ConstantBuilder(null)); :}
			| expr:left IS NOT NULL
			  {: RESULT = new NotEqualsBuilder(left, new ConstantBuilder(null)); :}
			| expr:left IN parameter:right
			  {: RESULT = new InBuilder(left, right); :}
			| expr:left IN LPAREN val_list:right RPAREN
			  {: RESULT = new InBuilder(left, right); :}
			| expr:left IN LPAREN select_query:select RPAREN
			  {: RESULT = new InBuilder(left, new SelectExpressionBuilder(select)); :}
			| expr:left LIKE expr:right
			  {: RESULT = new LikeBuilder(left, right); :}
			| expr:left LIKE ANY LPAREN expr:right RPAREN
			  {: RESULT = new AnyBuilder(left, " like ", right); :}
			| expr:left NOT LIKE expr:right
			  {: RESULT = new NotLikeBuilder(left, right); :}
			| expr:left NOT LIKE ALL LPAREN expr:right RPAREN
			  {: RESULT = new AllBuilder(left, " not like ", right); :}
            | expr:left PLUS expr:right
			  {: RESULT = new PlusBuilder(left, right); :}
            | expr:left MINUS expr:right
			  {: RESULT = new MinusBuilder(left, right); :}
            | expr:left MULT expr:right
			  {: RESULT = new MultiplyBuilder(left, right); :}
            | expr:left DIV expr:right
			  {: RESULT = new DivideBuilder(left, right); :}
            | expr:q QUESTION expr:y COLON expr:n
			  {: RESULT = new TernaryExpressionBuilder(q, y, n); :}
			| LPAREN select_query:select RPAREN
			  {: RESULT = new SelectExpressionBuilder(select); :}
            | THIS
              {: RESULT = ThisBuilder.SINGLETON; :}
            | OBJ_STATE
              {: RESULT = new ObjStateBuilder(); :}
            | IMAGE LPAREN expr:e RPAREN
              {: RESULT = new ImageExpressionBuilder(e); :}
            | IDENTIFIER:name LPAREN RPAREN
              {: RESULT = new CallBuilder(name); :}
            | IDENTIFIER:name LPAREN expr_or_list:arg RPAREN
              {: RESULT = new CallBuilder(name, arg); :}
            | IDENTIFIER:name LPAREN expr_or_list:arg ORDER_BY order_list:ol RPAREN
              {: RESULT = new CallBuilder(name, arg, ol); :}
            | LCURLY RCURLY
              {: RESULT = new JsonObjectExpressionBuilder(); :}
            | LCURLY json_token_list:list RCURLY
              {: RESULT = list; :}
            | field:f
              {: RESULT = f; :}
            | field_dot:ff
              {: RESULT = ff; :}
            | expr_dot:fe
              {: RESULT = fe; :}
            | val:v
              {: RESULT = v; :}
            ;

field     ::= IDENTIFIER:id
              {: RESULT = new FieldBuilder(id); :}
            | IN
              {: RESULT = new FieldBuilder("in"); :}
            | IMAGE
              {: RESULT = new FieldBuilder("image"); :}
            ;

val_list ::= val_list:list COMMA val:val
              {: RESULT = list; RESULT.expressions.add(val); :}
            | val:val
              {: RESULT = new ExpressionArrayBuilder(val); :}
            ;

val         ::= parameter:p
              {: RESULT = p; :}
            | constant:c
              {: RESULT = c; :}
            ;

parameter ::= QUESTION
              {: RESULT = new ParameterBuilder(); :}
            | QUESTION IDENTIFIER:name
              {: RESULT = new ParameterBuilder(name); :}
            | QUESTION IDENTIFIER:name DOT field:right
              {: RESULT = new ParameterBuilder(name, right); :}
            | QUESTION IDENTIFIER:name DOT LPAREN expr:right RPAREN
              {: RESULT = new ParameterBuilder(name, right); :}
            | QUESTION IDENTIFIER:name DOT field_dot:right
              {: RESULT = new ParameterBuilder(name, right); :}
            | DOLLAR NUMBER:index
              {: RESULT = new ParameterBuilder(Numbers.intValue(index)); :}
            ;

constant ::= NUMBER:n
              {: RESULT = new ConstantBuilder(n); :}
            | MINUS NUMBER:n
              {: RESULT = new ConstantBuilder(Numbers.negate(n)); :}
            | STRING:s
              {: RESULT = new ConstantBuilder(s); :}
            | BOOLEAN:b
              {: RESULT = new ConstantBuilder(b); :}
            | NULL
              {: RESULT = new ConstantBuilder(null); :}
            ;

json_token_list ::= json_token_list:list COMMA IDENTIFIER:key COLON expr:e
              {: RESULT = list; RESULT.add(key, e); :}
            | IDENTIFIER:key COLON expr:e
              {: RESULT = new JsonObjectExpressionBuilder(key, e); :}
            ;

order_list ::= order_list:list COMMA ordered_nulls:o
               {: RESULT = list; RESULT.expressions.add(o); :}
             | ordered_nulls:o
               {: RESULT = new ExpressionArrayBuilder(o); :}
             ;

ordered ::=    expr:e ASC
               {: RESULT = OrderedBuilder.embed(e).setAscending(true); :}
             | expr:e DESC
               {: RESULT = OrderedBuilder.embed(e).setDescending(true); :}
             | expr:e
               {: RESULT = e; :}
             ;

ordered_nulls ::= ordered:o NULLS FIRST
               {: RESULT = OrderedBuilder.embed(o).setNullsFirst(true); :}
             |  ordered:o NULLS LAST
               {: RESULT = OrderedBuilder.embed(o).setNullsLast(true); :}
             |  ordered:o
               {: RESULT = o; :}
             ;


/* select expression */

select_start    ::= SELECT
                    {: RESULT = new SelectBuilder(); :}
				  ;

select_distinct ::= select_start:select DISTINCT
                    {: RESULT = select; RESULT.distinct = true; :}
                  | select_start:select
                    {: RESULT = select; :}
                  ;

select_class    ::= select_distinct:select IDENTIFIER:className
                    {: RESULT = select; RESULT.buildingClassName = className; :}
                  | select_distinct:select IDENTIFIER:className IDENTIFIER:alias
                    {: RESULT = select; RESULT.buildingClassName = className; RESULT.buildingClassAlias = alias; :}
                  | select_distinct:select expr_list:fields FROM IDENTIFIER:className
                    {: RESULT = select; RESULT.fields = fields; RESULT.buildingClassName = className; :}
                  | select_distinct:select expr_list:fields FROM IDENTIFIER:className IDENTIFIER:alias
                    {: RESULT = select; RESULT.fields = fields; RESULT.buildingClassName = className; RESULT.buildingClassAlias = alias; :}
                  ;

select_where	::= select_class:select WHERE expr:where
                    {: RESULT = select; RESULT.where = where; :}
				  |	select_class:select
                    {: RESULT = select; :}
				  ;

select_group	::= select_where:select GROUP_BY expr_list:list
                    {: RESULT = select; RESULT.groupBy = list; :}
				  |	select_where:select GROUP_BY expr_list:list HAVING expr:having
                    {: RESULT = select; RESULT.groupBy = list; RESULT.having = having; :}
				  |	select_where:select
                    {: RESULT = select; :}
				  ;

select_order    ::= select_group:select ORDER_BY order_list:list
                    {: RESULT = select; RESULT.orderBy = list; :}
				  | select_group:select
                    {: RESULT = select; :}
				  ;

select_limit     ::= select_order:select LIMIT expr:limit
                    {: RESULT = select; RESULT.limit = limit; :}
				  | select_order:select
                    {: RESULT = select; :}
				  ;

select_query    ::= select_limit:select
                    {: RESULT = select; :}
                  ;

/* insert expression */

insert_start    ::= INSERT
                    {: RESULT = new InsertBuilder(); :}
				  ;

insert_class    ::= insert_start:insert IDENTIFIER:className
                    {: RESULT = insert; RESULT.buildingClassName = className; :}
                  | insert_start:insert IDENTIFIER:className IDENTIFIER:alias
                    {: RESULT = insert; RESULT.buildingClassName = className; RESULT.buildingClassAlias = alias; :}
                  ;

insert_set      ::= insert_class:insert SET expr_list:set_fields
                    {: RESULT = insert; RESULT.setFields = set_fields; :}
                  ;

insert_statement  ::= insert_set:insert
                    {: RESULT = insert; :}
                  ;

/* update expression */

update_start    ::= UPDATE
                    {: RESULT = new UpdateBuilder(); :}
				  ;

update_class    ::= update_start:update IDENTIFIER:className
                    {: RESULT = update; RESULT.buildingClassName = className; :}
                  | update_start:update IDENTIFIER:className IDENTIFIER:alias
                    {: RESULT = update; RESULT.buildingClassName = className; RESULT.buildingClassAlias = alias; :}
                  ;

update_set      ::= update_class:update SET expr_list:set_fields
                    {: RESULT = update; RESULT.setFields = set_fields; :}
                  ;

update_where    ::= update_set:update WHERE expr:where
                    {: RESULT = update; RESULT.where = where; :}
				  |	update_set:update
                    {: RESULT = update; :}
				  ;

update_statement  ::= update_where:update
                    {: RESULT = update; :}
                  ;

/* delete expression */

delete_start    ::= DELETE
                    {: RESULT = new DeleteBuilder(); :}
				  ;

delete_class    ::= delete_start:delete IDENTIFIER:className
                    {: RESULT = delete; RESULT.buildingClassName = className; :}
                  | delete_start:delete IDENTIFIER:className IDENTIFIER:alias
                    {: RESULT = delete; RESULT.buildingClassName = className; RESULT.buildingClassAlias = alias; :}
                  | delete_start:delete FROM IDENTIFIER:className
                    {: RESULT = delete; RESULT.buildingClassName = className; :}
                  | delete_start:delete FROM IDENTIFIER:className IDENTIFIER:alias
                    {: RESULT = delete; RESULT.buildingClassName = className; RESULT.buildingClassAlias = alias; :}
                  ;

delete_where	::= delete_class:delete WHERE expr:where
                    {: RESULT = delete; RESULT.where = where; :}
				  |	delete_class:delete
                    {: RESULT = delete; :}
				  ;

delete_statement ::= delete_where:delete
                    {: RESULT = delete; :}
                  ;

