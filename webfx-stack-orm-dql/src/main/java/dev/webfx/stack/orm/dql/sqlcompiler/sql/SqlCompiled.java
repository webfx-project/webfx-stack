package dev.webfx.stack.orm.dql.sqlcompiler.sql;

import dev.webfx.stack.orm.dql.sqlcompiler.mapping.QueryRowToEntityMapping;
import dev.webfx.stack.orm.expression.Expression;

import java.util.List;

/**
 * @author Bruno Salmon
 */
public final class SqlCompiled {

    private final String sql;
    private final String countSql; // select count(*) ... used to return the total row numbers when the query is truncated by the limit clause
    private final List<String> parameterNames;
    private final boolean isQuery;
    private final String[] autoGeneratedKeyColumnNames;

    private final QueryRowToEntityMapping queryMapping;

    private final Expression<?> sqlUncompilableCondition;
    private final boolean cacheable;

    public SqlCompiled(String sql, String countSql, List<String> parameterNames, boolean isQuery, String[] autoGeneratedKeyColumnNames, QueryRowToEntityMapping queryMapping, Expression<?> sqlUncompilableCondition, boolean cacheable) {
        this.sql = sql;
        this.countSql = countSql;
        this.parameterNames = parameterNames;
        this.isQuery = isQuery;
        this.autoGeneratedKeyColumnNames = autoGeneratedKeyColumnNames;
        this.queryMapping = queryMapping;
        this.sqlUncompilableCondition = sqlUncompilableCondition;
        this.cacheable = cacheable;
    }

    public String getSql() {
        return sql;
    }

    public String getCountSql() {
        return countSql;
    }

    public List<String> getParameterNames() {
        return parameterNames;
    }

    public boolean isQuery() {
        return isQuery;
    }

    public String[] getAutoGeneratedKeyColumnNames() {
        return autoGeneratedKeyColumnNames;
    }


    public QueryRowToEntityMapping getQueryMapping() {
        return queryMapping;
    }

    public Expression<?> getSqlUncompilableCondition() {
        return sqlUncompilableCondition;
    }

    public boolean isCacheable() {
        return cacheable;
    }
}
